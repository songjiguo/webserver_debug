/**
 * Copyright 2007 by Gabriel Parmer, gabep1@cs.bu.edu
 *
 * Redistribution of this file is permitted under the GNU General
 * Public License v2.
 */

#include "include/mmap.h"
#include "include/chal.h"

static struct cos_page cos_pages[COS_MAX_MEMORY];

void cos_init_memory(void) 
{
	int i;

	for (i = 0 ; i < COS_MAX_MEMORY ; i++) {
		void *r = chal_alloc_page();
		if (NULL == r) {
			printk("cos: ERROR -- could not allocate page for cos memory\n");
		}
		cos_pages[i].addr = (paddr_t)chal_va2pa(r);
		cos_pages[i].rt_spdid = 0;
		cos_pages[i].rt_vaddr = (vaddr_t) 0;
	}

	return;
}

void cos_shutdown_memory(void)
{
	int i;

	for (i = 0 ; i < COS_MAX_MEMORY ; i++) {
		paddr_t addr = cos_pages[i].addr;
		chal_free_page(chal_pa2va((void*)addr));
		cos_pages[i].addr = 0;
	}
}

/*
 * This would be O(1) in the real implementation as there is a 1-1
 * correspondence between phys pages and memory capabilities, but in
 * our Linux implementation, this is not so.  The least we could do is
 * keep the page sorted by physaddr and do a binary search here.
 */
int cos_paddr_to_cap(paddr_t pa)
{
	int i;

	for (i = 0 ; i < COS_MAX_MEMORY ; i++) {
		if (cos_pages[i].addr == pa) {
			return i;
		}
	}

	return 0;
}   

paddr_t cos_access_page(unsigned long cap_no)
{
	paddr_t addr;

	if (cap_no > COS_MAX_MEMORY) return 0;
	addr = cos_pages[cap_no].addr;
	assert(addr);

	return addr;
}

/* 
   record the frame id, spd id and its corresponding addr
   info should be able to be looked up during recovery
 */

void
cos_add_root_info(int spdid, vaddr_t vaddr, unsigned long frame_id)
{	
	/* if (spdid != 5) printk("cos: root info added spd %d addr %p at frame %lu\n", spdid, vaddr, frame_id); */
	cos_pages[frame_id].rt_spdid = spdid;
	cos_pages[frame_id].rt_vaddr = vaddr;
}
void 
cos_remove_root_info(unsigned long frame_id)
{	
	/* printk("cos: root info removed at frame %lu\n", frame_id); */
	cos_pages[frame_id].rt_spdid = 0;
	cos_pages[frame_id].rt_vaddr = 0;
}

vaddr_t 
cos_lookup_root_page(unsigned long frame_id)
{
	/* printk("cos: root info lookup fr_id %d addr %p\n", frame_id, cos_pages[frame_id].rt_vaddr); */
	return cos_pages[frame_id].rt_vaddr;
}

int 
cos_lookup_root_spd(unsigned long frame_id)
{
	/* printk("cos: root info lookup fr_id %d spdid %d\n", frame_id, cos_pages[frame_id].rt_spdid); */
	return cos_pages[frame_id].rt_spdid;
}

int 
cos_is_rootpage(int spdid, vaddr_t vaddr, unsigned long frame_id)
{
	int ret = 0;

	if ((cos_pages[frame_id].rt_spdid == spdid) &&
	    (cos_pages[frame_id].rt_vaddr == vaddr))
		ret = 1;

	return ret;
}
